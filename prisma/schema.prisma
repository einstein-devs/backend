generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CargoPosicao {
  ALUNO
  COORDENADOR
  DIRETOR
}

model usuario {
  id     Int    @id @default(autoincrement())
  codigo String @unique @db.VarChar(30)
  nome   String @db.VarChar(70)
  email  String @db.VarChar(120)
  senha  String

  cargo   cargo  @relation(fields: [cargoId], references: [id])
  cargoId String @map("id_cargo")

  curso   curso  @relation(fields: [cursoId], references: [id])
  cursoId String @map("id_curso")

  cursoCoordenado   curso?  @relation(name: "coordenador")
  cursoCoordenadoId String?

  certificado certificado[]
  presenca    presenca[]
  centro      centro[]

  dataCriacao     DateTime  @default(now()) @map("data_criacao")
  dataAtualizacao DateTime  @updatedAt() @map("data_atualizacao")
  dataExclusao    DateTime? @map("data_exclusao")
  evento          evento[]
}

model curso {
  id     String  @id @default(uuid()) @db.Uuid()
  nome   String  @db.VarChar(70)
  ementa String? @db.VarChar(100)

  usuario usuario[] @relation()

  centro        centro  @relation(fields: [centroId], references: [id])
  centroId      String  @map("id_centro")
  coordenador   usuario @relation(name: "coordenador", fields: [coordenadorId], references: [id])
  coordenadorId Int     @unique @map("id_coordenador")

  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @updatedAt() @map("data_atualizacao")
}

model centro {
  id   String @id @default(uuid()) @db.Uuid()
  nome String @unique @db.VarChar(50)

  curso curso[]

  diretor   usuario @relation(fields: [diretorId], references: [id])
  diretorId Int

  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @updatedAt() @map("data_atualizacao")
}

model cargo {
  id      String       @id @default(uuid()) @db.Uuid()
  posicao CargoPosicao @unique
  usuario usuario[]

  dataCriacao DateTime @default(now()) @map("data_criacao")
}

model evento {
  id              Int      @id @default(autoincrement())
  titulo          String   @db.VarChar(40)
  descricao       String?  @db.VarChar(255)
  codigo          String?  @db.VarChar(12)
  urlImagem       String?  @map("url_imagem")
  dataHoraInicio  DateTime @map("data_hora_inicio")
  dataHoraTermino DateTime @map("data_hora_termino")

  certificado certificado[]
  presenca    presenca[]

  local   local @relation(fields: [localId], references: [id])
  localId Int   @map("id_local")

  usuario   usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int     @map("id_usuario")

  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @updatedAt() @map("data_atualizacao")
}

model local {
  id              Int      @id @default(autoincrement())
  titulo          String   @db.VarChar(50)
  descricao       String?  @db.VarChar(255)
  evento          evento[]
  dataCriacao     DateTime @default(now()) @map("data_criacao")
  dataAtualizacao DateTime @updatedAt() @map("data_atualizacao")
}

model certificado {
  id String @id @default(uuid()) @db.Uuid()

  usuario   usuario @relation(fields: [usuarioId], references: [id])
  evento    evento  @relation(fields: [eventoId], references: [id])
  usuarioId Int     @map("id_usuario")
  eventoId  Int     @map("id_evento")

  dataEmissao DateTime @default(now()) @map("data_emissao")
}

model presenca {
  id String @id @default(uuid()) @db.Uuid()

  usuario   usuario @relation(fields: [usuarioId], references: [id])
  evento    evento  @relation(fields: [eventoId], references: [id])
  usuarioId Int     @unique @map("id_usuario")
  eventoId  Int     @unique @map("id_evento")

  dataInscricao DateTime  @default(now()) @map("data_inscricao")
  dataPresenca  DateTime? @map("data_presenca")
}
